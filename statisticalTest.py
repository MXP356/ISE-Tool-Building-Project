import numpy as np
from scipy.stats import wilcoxon

# Input the CV_List metric values from the first model here.
BaselineAuc = [np.float64(0.7692147034252297), np.float64(0.7391114982578397), np.float64(0.7477099236641221), np.float64(0.7531135531135531), np.float64(0.7209645669291338), np.float64(0.7695094760312152), np.float64(0.7541703248463565), np.float64(0.6977671451355661), np.float64(0.7263993316624896), np.float64(0.7977941176470589), np.float64(0.7947761194029851), np.float64(0.7983796296296296), np.float64(0.7286259541984732), np.float64(0.7573529411764706), np.float64(0.6848132487667371), np.float64(0.7394701086956521), np.float64(0.7527151211361738), np.float64(0.7811679790026245), np.float64(0.7789363920750783), np.float64(0.7729741019214703), np.float64(0.7961538461538462), np.float64(0.7646520146520145), np.float64(0.7712829736211031), np.float64(0.8175182481751825), np.float64(0.7831501831501831), np.float64(0.7615873015873017), np.float64(0.7091535433070865), np.float64(0.7654553049289892), np.float64(0.7671296296296295), np.float64(0.7418957011980268)]
BaselineAccuracy = [0.6357615894039735, 0.6423841059602649, 0.6357615894039735, 0.609271523178808, 0.6158940397350994, 0.6423841059602649, 0.609271523178808, 0.6291390728476821, 0.6026490066225165, 0.6357615894039735, 0.6357615894039735, 0.6887417218543046, 0.6026490066225165, 0.5629139072847682, 0.6225165562913907, 0.6490066225165563, 0.6490066225165563, 0.6887417218543046, 0.7152317880794702, 0.6423841059602649, 0.6490066225165563, 0.6291390728476821, 0.6490066225165563, 0.6688741721854304, 0.695364238410596, 0.6556291390728477, 0.5960264900662252, 0.6291390728476821, 0.6821192052980133, 0.6556291390728477]
BaselinePrecision = [0.6134683098591549, 0.6444736842105263, 0.6142605633802817, 0.621355813136635, 0.6181578947368421, 0.5864937388193202, 0.6016146016146016, 0.5881307746979388, 0.5951210951210951, 0.6071428571428571, 0.6180555555555556, 0.6173952641165756, 0.6050877192982457, 0.5925925925925926, 0.5927006009190526, 0.6243386243386243, 0.6074982231698649, 0.65227434257285, 0.6030034655371582, 0.6152557319223986, 0.6418918918918919, 0.6267543859649123, 0.5816197691197691, 0.609375, 0.6394300144300145, 0.6447137337548297, 0.61207805907173, 0.6117264416315049, 0.6056776556776556, 0.6216335931963146]
BaselineRecall = [0.7692147034252297, 0.7391114982578397, 0.7477099236641221, 0.7531135531135531, 0.7209645669291338, 0.7695094760312151, 0.7541703248463565, 0.6977671451355663, 0.7263993316624895, 0.7977941176470589, 0.7947761194029851, 0.7983796296296296, 0.7286259541984733, 0.7573529411764706, 0.6848132487667371, 0.7394701086956521, 0.7527151211361738, 0.7811679790026247, 0.7789363920750783, 0.7729741019214703, 0.7961538461538462, 0.7646520146520146, 0.7712829736211031, 0.8175182481751825, 0.7831501831501831, 0.7615873015873016, 0.7091535433070866, 0.7654553049289892, 0.7671296296296296, 0.7418957011980267]
BaselineF1 = [0.561903254734399, 0.6040209790209791, 0.5674704442476954, 0.556700004975867, 0.5664356435643564, 0.5333104395604396, 0.5360137492838914, 0.5447889750215331, 0.531055900621118, 0.5497424776362158, 0.561903254734399, 0.5903607503607504, 0.541868932038835, 0.49605582524271846, 0.5517420967657934, 0.5882595050676545, 0.5661154784494442, 0.6303838341753034, 0.5876151159098126, 0.5670135938827527, 0.5930333079074498, 0.5724110032362459, 0.5299265785609397, 0.5678800366300366, 0.6206858890345129, 0.6072428971588636, 0.5506171634873396, 0.5568134171907757, 0.5780158360503027, 0.5884696016771489]

# Input the CV_List metrric values from the second model here.
NewAuc = [np.float64(0.6238512949039265), np.float64(0.6444541231126597), np.float64(0.6135496183206107), np.float64(0.6313186813186812), np.float64(0.671751968503937), np.float64(0.701783723522854), np.float64(0.66900790166813), np.float64(0.5901116427432217), np.float64(0.6516290726817042), np.float64(0.7112745098039216), np.float64(0.767998244073749), np.float64(0.6064814814814815), np.float64(0.6232824427480916), np.float64(0.6372549019607843), np.float64(0.616983791402396), np.float64(0.6543817934782609), np.float64(0.5735171261487051), np.float64(0.609251968503937), np.float64(0.6355578727841501), np.float64(0.6756474519632414), np.float64(0.675091575091575), np.float64(0.6789377289377289), np.float64(0.6975419664268585), np.float64(0.5990615224191865), np.float64(0.5721611721611721), np.float64(0.6120634920634921), np.float64(0.656003937007874), np.float64(0.6050543024227234), np.float64(0.6488425925925926), np.float64(0.6435870331219168)]
NewAccuracy = [0.8874172185430463, 0.847682119205298, 0.8807947019867549, 0.8807947019867549, 0.8741721854304636, 0.9006622516556292, 0.9139072847682119, 0.8741721854304636, 0.8940397350993378, 0.9072847682119205, 0.9072847682119205, 0.8874172185430463, 0.8609271523178808, 0.8807947019867549, 0.8609271523178808, 0.8675496688741722, 0.8410596026490066, 0.8543046357615894, 0.9205298013245033, 0.8940397350993378, 0.8874172185430463, 0.8940397350993378, 0.9337748344370861, 0.8543046357615894, 0.847682119205298, 0.8609271523178808, 0.847682119205298, 0.8543046357615894, 0.9139072847682119, 0.8741721854304636]
NewPrecision = [0.7320031298904539, 0.7773132664437012, 0.7600524475524475, 0.7805164319248826, 0.7918060200668896, 0.6887382690302398, 0.8365384615384616, 0.6975524475524475, 0.7574468085106383, 0.7402452619843924, 0.767998244073749, 0.6799687010954616, 0.6800445930880714, 0.6560758082497213, 0.7155844155844155, 0.7533444816053512, 0.591762252346194, 0.7361702127659575, 0.7988505747126436, 0.7520983213429258, 0.7865707434052758, 0.8172077922077923, 0.7880244755244755, 0.587962962962963, 0.6397163120567376, 0.8085664335664335, 0.7087357330992099, 0.631126173096976, 0.8189484126984128, 0.7646103896103896]
NewRecall = [0.6238512949039265, 0.6444541231126597, 0.6135496183206106, 0.6313186813186813, 0.671751968503937, 0.7017837235228539, 0.66900790166813, 0.5901116427432217, 0.6516290726817042, 0.7112745098039216, 0.767998244073749, 0.6064814814814814, 0.6232824427480916, 0.6372549019607843, 0.6169837914023961, 0.6543817934782609, 0.5735171261487051, 0.609251968503937, 0.6355578727841502, 0.6756474519632414, 0.6750915750915751, 0.678937728937729, 0.6975419664268585, 0.5990615224191866, 0.5721611721611721, 0.612063492063492, 0.6560039370078741, 0.6050543024227235, 0.6488425925925926, 0.6435870331219168]
NewF1 = [0.6542760942760943, 0.6754508924399589, 0.6457247132429614, 0.6669117647058824, 0.7073941866394697, 0.694949494949495, 0.7165342960288809, 0.6136026936026936, 0.6850886339937434, 0.7244525547445255, 0.767998244073749, 0.6293140794223827, 0.6427847245691112, 0.6457247132429614, 0.6427847245691112, 0.6846282372598163, 0.5805555555555555, 0.6354258121158911, 0.6787234042553192, 0.7039215686274509, 0.71082572941309, 0.7203703703703703, 0.7322695035460993, 0.5928921568627451, 0.5865968337102726, 0.6427847245691112, 0.6754508924399589, 0.6155092592592593, 0.6940938133083996, 0.6768052269911006]





#print('base:',len(Baseline_Values),'new:',len(New_Values))


Baseline_Values = {
    "Auc": BaselineAuc,
    "Accuracy": BaselineAccuracy,
    "Precision": BaselinePrecision,
    "Recall": BaselineRecall,
    "F1": BaselineF1
}
New_Values = {
    "Auc": NewAuc,
    "Accuracy": NewAccuracy,
    "Precision": NewPrecision,
    "Recall": NewRecall,
    "F1": NewF1
}


print('Test Results:')


for metric in Baseline_Values.keys():
    stat, p_value = wilcoxon(Baseline_Values[metric], New_Values[metric])
    print(f'Test Statistic: {stat}')
    print(f"P-value: {p_value}")

    if p_value < 0.05:
        print(f'ðŸŸ¢ The difference in {metric} is statistically significant (p < 0.05)')
        print('The new model significantly outperforms the Baseline')
    else:
        print(f'ðŸ”´ No statistically significant difference in {metric} (p >= 0.05)')
        print('The difference could be due to random chance.')







