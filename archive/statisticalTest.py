import numpy as np
from scipy.stats import wilcoxon

## For TF-IDF + NB [PyTorch]:
BaselineAuc = [np.float64(0.7692147034252297), np.float64(0.7391114982578397), np.float64(0.7477099236641221), np.float64(0.7531135531135531), np.float64(0.7209645669291338), np.float64(0.7695094760312152), np.float64(0.7541703248463565), np.float64(0.6977671451355661), np.float64(0.7263993316624896), np.float64(0.7977941176470589)]
BaselineAccuracy = [0.6357615894039735, 0.6423841059602649, 0.6357615894039735, 0.609271523178808, 0.6158940397350994, 0.6423841059602649, 0.609271523178808, 0.6291390728476821, 0.6026490066225165, 0.6357615894039735]
BaselinePrecision = [0.6134683098591549, 0.6444736842105263, 0.6142605633802817, 0.621355813136635, 0.6181578947368421, 0.5864937388193202, 0.6016146016146016, 0.5881307746979388, 0.5951210951210951, 0.6071428571428571]
BaselineRecall = [0.7692147034252297, 0.7391114982578397, 0.7477099236641221, 0.7531135531135531, 0.7209645669291338, 0.7695094760312151, 0.7541703248463565, 0.6977671451355663, 0.7263993316624895, 0.7977941176470589]
BaselineF1 = [0.561903254734399, 0.6040209790209791, 0.5674704442476954, 0.556700004975867, 0.5664356435643564, 0.5333104395604396, 0.5360137492838914, 0.5447889750215331, 0.531055900621118, 0.5497424776362158]
Baseline_Values_PyTorch_NB = {
    "Auc": BaselineAuc,
    "Accuracy": BaselineAccuracy,
    "Precision": BaselinePrecision,
    "Recall": BaselineRecall,
    "F1": BaselineF1
}


Baseline_Values_Tensorflow_NB =  {
    "Auc": [np.float64(0.7328469884025439), np.float64(0.7345931997571342), np.float64(0.7171666666666667), np.float64(0.6995833333333333), np.float64(0.6961466517022072), np.float64(0.7199193548387097), np.float64(0.7336404914529915), np.float64(0.73), np.float64(0.7381160369804178), np.float64(0.7247356774034914)],
    "Accuracy": [0.587248322147651, 0.5771812080536913, 0.5536912751677853, 0.5100671140939598, 0.5503355704697986, 0.5604026845637584, 0.5906040268456376, 0.5469798657718121, 0.587248322147651, 0.5536912751677853],
    "Precision": [0.6442343344456805, 0.6447097378277153, 0.6216790400149415, 0.6176788522012578, 0.6237899608065354, 0.6273287575290657, 0.6668096872616324, 0.6311475409836066, 0.6531367041198501, 0.6290960451977401],
    "Recall": [0.7328469884025439, 0.7345931997571342, 0.7171666666666667, 0.6995833333333333, 0.6961466517022072, 0.7199193548387097, 0.7336404914529915, 0.73, 0.7381160369804178, 0.7247356774034915],
    "F1": [0.5638661161548255, 0.5553713527851459, 0.5251991614255765, 0.4907771535580524, 0.5299905838041431, 0.5339469694256413, 0.5787449017426771, 0.5228607009428927, 0.5679377615371015, 0.5284080768178194]
}



Baseline_Values_Keras_NB = {
    "Auc": [np.float64(0.6779162339910004), np.float64(0.7540584415584417), np.float64(0.656140350877193), np.float64(0.7306422018348624), np.float64(0.6985321100917431), np.float64(0.7012807199723088), np.float64(0.6844362745098039), np.float64(0.6441707717569787), np.float64(0.7291666666666667), np.float64(0.7075471698113207)],
    "Accuracy": [0.5298507462686567, 0.6194029850746269, 0.48507462686567165, 0.6119402985074627, 0.5597014925373134, 0.5671641791044776, 0.5522388059701493, 0.5597014925373134, 0.582089552238806, 0.5373134328358209],
    "Precision": [0.624515503875969, 0.639950816007154, 0.5854741896758703, 0.6411408039523916, 0.6252314814814814, 0.6354530631260191, 0.6487154150197628, 0.5995916515426497, 0.638507326007326, 0.6555555555555556],
    "Recall": [0.6779162339910003, 0.7540584415584416, 0.656140350877193, 0.7306422018348624, 0.6985321100917432, 0.7012807199723088, 0.6844362745098039, 0.6441707717569787, 0.7291666666666667, 0.7075471698113207],
    "F1": [0.5180131316014844, 0.5800921658986175, 0.45977212971078, 0.5817527010804322, 0.5380660239555946, 0.5502314814814815, 0.5472972972972974, 0.5380660239555946, 0.5568154972832506, 0.5306214689265537]
}


Baseline_Values_MXNet_NB = {
    "Auc": [np.float64(0.7197802197802199), np.float64(0.75), np.float64(0.7692307692307692), np.float64(0.7309523809523809), np.float64(0.7355072463768115), np.float64(0.7250936329588014), np.float64(0.8031914893617021), np.float64(0.7444444444444445), np.float64(0.7414772727272727), np.float64(0.7802197802197802)],
    "Accuracy": [0.625, 0.6634615384615384, 0.5961538461538461, 0.5865384615384616, 0.5961538461538461, 0.5769230769230769, 0.6442307692307693, 0.5576923076923077, 0.6057692307692307, 0.6153846153846154],
    "Precision": [0.5967261904761905, 0.6313923105636432, 0.6181818181818182, 0.6079777365491651, 0.5961538461538461, 0.6121687196715192, 0.6063829787234043, 0.6166666666666667, 0.6261595547309833, 0.6226415094339622],
    "Recall": [0.7197802197802198, 0.75, 0.7692307692307692, 0.730952380952381, 0.7355072463768115, 0.7250936329588016, 0.8031914893617021, 0.7444444444444445, 0.7414772727272727, 0.7802197802197802],
    "F1": [0.5476748076279693, 0.6015325670498084, 0.5411764705882353, 0.5337295381086435, 0.5260416666666667, 0.5326797385620915, 0.5529220401998374, 0.5175473981444131, 0.5616325691374524, 0.5561246265471618]
}

Baseline_Values_Caffe_NB = {
    "Auc": [np.float64(0.7403846153846154), np.float64(0.6547169811320754), np.float64(0.6075471698113208), np.float64(0.30092592592592593), np.float64(0.803921568627451), np.float64(0.6282051282051282), np.float64(0.5583333333333332), np.float64(0.6132075471698113), np.float64(0.6218487394957983), np.float64(0.7051282051282052)],
    "Accuracy": [0.5344827586206896, 0.5344827586206896, 0.4482758620689655, 0.3448275862068966, 0.6551724137931034, 0.46551724137931033, 0.7931034482758621, 0.29310344827586204, 0.5517241379310345, 0.603448275862069],
    "Precision": [0.5909090909090909, 0.5488095238095239, 0.5354037267080746, 0.4457070707070707, 0.6296296296296297, 0.5496894409937888, 0.5897435897435898, 0.5543478260869565, 0.5517241379310345, 0.5764635603345281],
    "Recall": [0.7403846153846154, 0.6547169811320754, 0.6075471698113208, 0.30092592592592593, 0.803921568627451, 0.6282051282051282, 0.5583333333333333, 0.6132075471698113, 0.6218487394957983, 0.7051282051282051],
    "F1": [0.4785214785214785, 0.4476190476190476, 0.3894736842105263, 0.275, 0.5839311334289814, 0.41528455284552845, 0.565, 0.2826546003016591, 0.4763888888888889, 0.5129609346476817]
}




Pytorch_BERT_LR = {
    "Auc": [np.float64(0.6643692564745196), np.float64(0.608739837398374), np.float64(0.6347328244274809), np.float64(0.6397435897435897), np.float64(0.6222112860892388), np.float64(0.6321070234113713), np.float64(0.7129060579455664), np.float64(0.6126395534290271), np.float64(0.5494987468671679), np.float64(0.6482843137254901)],
    "Accuracy": [0.8741721854304636, 0.8344370860927153, 0.8807947019867549, 0.8609271523178808, 0.847682119205298, 0.9006622516556292, 0.9006622516556292, 0.8741721854304636, 0.8410596026490066, 0.9006622516556292],
    "Precision": [0.6928921568627451, 0.7431818181818182, 0.750354609929078, 0.698905109489051, 0.7076365663322185, 0.6680851063829787, 0.7528675703858185, 0.700354609929078, 0.5710431654676259, 0.7145390070921986],
    "Recall": [0.6643692564745196, 0.608739837398374, 0.6347328244274809, 0.6397435897435897, 0.6222112860892388, 0.6321070234113713, 0.7129060579455663, 0.6126395534290271, 0.5494987468671679, 0.6482843137254902],
    "F1": [0.6768052269911006, 0.6319586623769133, 0.6669117647058824, 0.6606741573033708, 0.6457929627740948, 0.6470313230481534, 0.7303892393762648, 0.6376152583049135, 0.5558823529411765, 0.6729241877256318]
}




NewAuc = [np.float64(0.5758145363408521), np.float64(0.5949477351916376), np.float64(0.7347328244274809), np.float64(0.5529304029304029), np.float64(0.5805446194225721), np.float64(0.7235228539576367), np.float64(0.6321334503950835), np.float64(0.5637958532695375), np.float64(0.6276106934001671), np.float64(0.7409313725490194)]

NewAccuracy = [0.8874172185430463, 0.8344370860927153, 0.9072847682119205, 0.8145695364238411, 0.8344370860927153, 0.9403973509933775, 0.8940397350993378, 0.8675496688741722, 0.8940397350993378, 0.9072847682119205]

NewPrecision = [0.7486301369863013, 0.755868544600939, 0.8206465067778936, 0.5708333333333333, 0.6594155844155845, 0.8505244755244755, 0.7355242566510172, 0.6587301587301587, 0.7670454545454546, 0.7409313725490196]

NewRecall = [0.5758145363408521, 0.5949477351916376, 0.7347328244274809, 0.552930402930403, 0.5805446194225722, 0.7235228539576366, 0.6321334503950834, 0.5637958532695375, 0.6276106934001671, 0.7409313725490196]

NewF1 = [0.5999688327879071, 0.6149923508414075, 0.767998244073749, 0.5584795321637427, 0.5960406634563937, 0.7697000508388409, 0.6633221850613155, 0.5791527313266444, 0.6633221850613155, 0.7409313725490196]





#print('base:',len(Baseline_Values),'new:',len(New_Values))


Baseline_Values = Baseline_Values_PyTorch_NB
New_Values = {
    "Auc": NewAuc,
    "Accuracy": NewAccuracy,
    "Precision": NewPrecision,
    "Recall": NewRecall,
    "F1": NewF1
}


print('Test Results:')


for metric in Baseline_Values.keys():
    stat, p_value = wilcoxon(Baseline_Values[metric], New_Values[metric])
    print(f'Test Statistic: {stat:.4f}')
    print(f"P-value: {p_value:.4f}")

    if p_value < 0.05:
        print(f'ðŸŸ¢ The difference in {metric} is statistically significant (p < 0.05)')
        print('The new model significantly outperforms the Baseline')
    else:
        print(f'ðŸ”´ No statistically significant difference in {metric} (p >= 0.05)')
        print('The difference could be due to random chance.')







